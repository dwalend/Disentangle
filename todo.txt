Done

* Fixed bug in edge(,) methods in Adjacency Digraphs to return the correct edge.
* Added DigraphInnerEdgeTrait and LabelDigraphInnerEdgeTrait to get inner nodes and labels from edges.

TODO This release

* Clustering algorithm
* Congressional record
* A*

* Dijkstra's and Brandes - fill heap as nodes become reachable to reduce the heap's average complexity
* Semiring algorithm - create label graph methods for label-less directed graphs, undirected graphs.
* IndexedSubSet backed by BitSet

Next release


Future

* Subgraph representation

Far Future

* Graph layout based on clusters

Blog

* Blog about controlling complexity
* Blog about examples
* Blog about computational stability


Later

* More Enron
* path representation for net.walend.graph
* Prim's MST algorithm
* Faster transitive closure
* Dijkstra's algorithm special case speed-ups
* Dijkstra's algorithms for infinite graphs
* A* and A* for infinite graphs.


Publicize

* Blog a bit
* Simplicity for scala talk

Overall
* Add more to the package doc.
* Images in package doc

Structures

* MultiPath representation (Probably a subgraph via having)
* Concurrent Graph (Or at least Graph-With-Concurrently-Modifiable-Edges)

Algorithms

* MST with Fibonacci heap
* Variations on Dijkstra's algorithm from wikipedia
* Lazy Dijkstra. (Single-Source graph with Dijkstra's algorithm)
* A* algorithm
* Parallel queued graph minimization (will need a concurrent mutable edge graph)

Graph storage

* DynamoDB clusters


Semirings

* More Semirings

Figure out

* path representation.


---

Prim's MST algorithm

Put all the verticies in a priority queue with variable key values
Initialize all the keys to O.
Pick the root and set its key to I.
While the queue is not empty
    extract the minimum edge and node
        if the node isn't in the MST
            for each node reachable from it not currently in the MST
                if some node is closer by using this node
                    replace the key with the closer value

---


